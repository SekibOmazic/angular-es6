System.register(["./src/TodoService", "./src/TodoCtrl"], function($__export) {
  "use strict";
  var TodoService,
      TodoCtrl;
  return {
    setters: [function(m) {
      TodoService = m.default;
    }, function(m) {
      TodoCtrl = m.default;
    }],
    execute: function() {
      angular.module('app', ['ngAnimate', 'angular-growl']).service('TodoService', TodoService).controller('TodoController', TodoCtrl);
    }
  };
});

System.register(["./TodoService", "./TodoItem"], function($__export) {
  "use strict";
  var TodoService,
      TodoItem,
      TodoCtrl;
  return {
    setters: [function(m) {
      TodoService = m.default;
    }, function(m) {
      TodoItem = m.default;
    }],
    execute: function() {
      TodoCtrl = (function() {
        var TodoCtrl = function TodoCtrl(growl, TodoService) {
          this.growl = growl;
          this.service = TodoService;
          this.items = this.service.getAll();
          this.newTodo = '';
        };
        return ($traceurRuntime.createClass)(TodoCtrl, {
          addTodo: function() {
            var anItem = new TodoItem(this.newTodo);
            this.growl.addInfoMessage(anItem.toString() + ' added', {ttl: 2000});
            this.service.add(anItem);
            this.newTodo = '';
          },
          removeTodo: function(item) {
            var removed = this.service.remove(item);
            this.growl.addWarnMessage(removed.toString() + 'removed', {ttl: 2000});
          },
          clearAll: function() {
            this.service.clearAll();
            this.growl.addErrorMessage('All Clear', {ttl: 2000});
          }
        }, {});
      }());
      TodoCtrl.$inject = ['growl', 'TodoService'];
      $__export('default', TodoCtrl);
    }
  };
});

System.register([], function($__export) {
  "use strict";
  var TodoItem;
  return {
    setters: [],
    execute: function() {
      TodoItem = (function() {
        var TodoItem = function TodoItem(text) {
          var completed = arguments[1] !== (void 0) ? arguments[1] : false;
          this.text = text;
          this.completed = completed;
        };
        return ($traceurRuntime.createClass)(TodoItem, {
          toggle: function() {
            this.completed = !this.completed;
          },
          toString: function() {
            return (this.text + "...");
          }
        }, {});
      }());
      $__export('default', TodoItem);
    }
  };
});

System.register(["./TodoItem"], function($__export) {
  "use strict";
  var TodoItem,
      TodoService;
  return {
    setters: [function(m) {
      TodoItem = m.default;
    }],
    execute: function() {
      TodoService = (function() {
        var TodoService = function TodoService() {
          this.todos = [new TodoItem('Learn Angular 1.0', true), new TodoItem('Learn Angular 2.0'), new TodoItem('Learn AtScript')];
        };
        return ($traceurRuntime.createClass)(TodoService, {
          add: function(todo) {
            this.todos.push(todo);
          },
          remove: function(todo) {
            var index = this.todos.indexOf(todo);
            var removedItem = this.todos.splice(index, 1);
            return removedItem;
          },
          getAll: function() {
            return this.todos;
          },
          clearAll: function() {
            this.todos.length = 0;
          }
        }, {});
      }());
      $__export('default', TodoService);
    }
  };
});

System.register([], function($__export) {
  "use strict";
  var BaseAnnotation,
      Service,
      Controller,
      Inject;
  return {
    setters: [],
    execute: function() {
      BaseAnnotation = $__export("BaseAnnotation", (function() {
        var BaseAnnotation = function BaseAnnotation(name) {
          this.name = name;
        };
        return ($traceurRuntime.createClass)(BaseAnnotation, {}, {});
      }()));
      Service = $__export("Service", (function($__super) {
        var Service = function Service(name) {
          $traceurRuntime.superCall(this, Service.prototype, "constructor", [name]);
        };
        return ($traceurRuntime.createClass)(Service, {}, {}, $__super);
      }(BaseAnnotation)));
      Controller = $__export("Controller", (function($__super) {
        var Controller = function Controller(name) {
          $traceurRuntime.superCall(this, Controller.prototype, "constructor", [name]);
        };
        return ($traceurRuntime.createClass)(Controller, {}, {}, $__super);
      }(BaseAnnotation)));
      Inject = $__export("Inject", (function() {
        var Inject = function Inject() {
          for (var dependencies = [],
              $__1 = 0; $__1 < arguments.length; $__1++)
            $traceurRuntime.setProperty(dependencies, $__1, arguments[$traceurRuntime.toProperty($__1)]);
          this.dependencies = dependencies;
        };
        return ($traceurRuntime.createClass)(Inject, {}, {});
      }()));
    }
  };
});

//# sourceMappingURL=data:application/json;base64,
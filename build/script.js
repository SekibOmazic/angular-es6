System.register(["./src/TodoService", "./src/TodoCtrl"], function($__export) {
  "use strict";
  var TodoService,
      TodoCtrl;
  return {
    setters: [function(m) {
      TodoService = m.default;
    }, function(m) {
      TodoCtrl = m.default;
    }],
    execute: function() {
      angular.module('app', ['ngAnimate', 'angular-growl']).service('TodoService', TodoService).controller('TodoController', TodoCtrl);
    }
  };
});

System.register(["./TodoService", "./TodoItem"], function($__export) {
  "use strict";
  var TodoService,
      TodoItem,
      TodoCtrl;
  return {
    setters: [function(m) {
      TodoService = m.default;
    }, function(m) {
      TodoItem = m.default;
    }],
    execute: function() {
      TodoCtrl = (function() {
        var TodoCtrl = function TodoCtrl(growl, TodoService) {
          this.growl = growl;
          this.service = TodoService;
          this.items = this.service.getAll();
          this.newTodo = '';
        };
        return ($traceurRuntime.createClass)(TodoCtrl, {
          addTodo: function() {
            var anItem = new TodoItem(this.newTodo);
            this.growl.addInfoMessage(anItem.toString() + ' added', {ttl: 2000});
            this.service.add(anItem);
            this.newTodo = '';
          },
          removeTodo: function(item) {
            var removed = this.service.remove(item);
            this.growl.addWarnMessage(removed.toString() + 'removed', {ttl: 2000});
          },
          clearAll: function() {
            this.service.clearAll();
            this.growl.addErrorMessage('All Clear', {ttl: 2000});
          }
        }, {});
      }());
      TodoCtrl.$inject = ['growl', 'TodoService'];
      $__export('default', TodoCtrl);
    }
  };
});

System.register([], function($__export) {
  "use strict";
  var TodoItem;
  return {
    setters: [],
    execute: function() {
      TodoItem = (function() {
        var TodoItem = function TodoItem(text) {
          var completed = arguments[1] !== (void 0) ? arguments[1] : false;
          this.text = text;
          this.completed = completed;
        };
        return ($traceurRuntime.createClass)(TodoItem, {
          toggle: function() {
            this.completed = !this.completed;
          },
          toString: function() {
            return (this.text + "...");
          }
        }, {});
      }());
      $__export('default', TodoItem);
    }
  };
});

System.register(["./TodoItem"], function($__export) {
  "use strict";
  var TodoItem,
      TodoService;
  return {
    setters: [function(m) {
      TodoItem = m.default;
    }],
    execute: function() {
      TodoService = $__export("TodoService", (function() {
        var TodoService = function TodoService() {
          this.todos = [new TodoItem('Learn Angular 1.0', true), new TodoItem('Learn Angular 2.0'), new TodoItem('Learn AtScript')];
        };
        return ($traceurRuntime.createClass)(TodoService, {
          add: function(todo) {
            this.todos.push(todo);
          },
          remove: function(todo) {
            var index = this.todos.indexOf(todo);
            var removedItem = this.todos.splice(index, 1);
            return removedItem;
          },
          getAll: function() {
            return this.todos;
          },
          clearAll: function() {
            this.todos.length = 0;
          }
        }, {});
      }()));
      $__export('default', TodoService);
    }
  };
});

System.register([], function($__export) {
  "use strict";
  var BaseAnnotation,
      Service,
      Controller,
      Inject;
  return {
    setters: [],
    execute: function() {
      BaseAnnotation = $__export("BaseAnnotation", (function() {
        var BaseAnnotation = function BaseAnnotation(name) {
          this.name = name;
        };
        return ($traceurRuntime.createClass)(BaseAnnotation, {}, {});
      }()));
      Service = $__export("Service", (function($__super) {
        var Service = function Service(name) {
          $traceurRuntime.superCall(this, Service.prototype, "constructor", [name]);
        };
        return ($traceurRuntime.createClass)(Service, {}, {}, $__super);
      }(BaseAnnotation)));
      Controller = $__export("Controller", (function($__super) {
        var Controller = function Controller(name) {
          $traceurRuntime.superCall(this, Controller.prototype, "constructor", [name]);
        };
        return ($traceurRuntime.createClass)(Controller, {}, {}, $__super);
      }(BaseAnnotation)));
      Inject = $__export("Inject", (function() {
        var Inject = function Inject() {
          for (var dependencies = [],
              $__1 = 0; $__1 < arguments.length; $__1++)
            $traceurRuntime.setProperty(dependencies, $__1, arguments[$traceurRuntime.toProperty($__1)]);
          this.dependencies = dependencies;
        };
        return ($traceurRuntime.createClass)(Inject, {}, {});
      }()));
    }
  };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci80IiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzMiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMiIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xIiwiYXBwLmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzYiLCJAdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNyIsIlRvZG9DdHJsLmpzIiwiQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzUiLCJUb2RvSXRlbS5qcyIsIkB0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci84IiwiVG9kb1NlcnZpY2UuanMiLCIuLi9AdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNCIsIi4uL0B0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8zIiwiLi4vQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzgiLCIuLi9AdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvNyIsIi4uL2RpV3JhcHBlci9hbm5vdGF0aW9ucy5qcyIsIi4uL0B0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci8xMCIsIi4uL0B0cmFjZXVyL2dlbmVyYXRlZC9UZW1wbGF0ZVBhcnNlci85IiwiLi4vQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzExIiwiLi4vQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEzIiwiLi4vQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEtBQUssU0FBUyxBQUFDLHlDQUFvQixVQUFTLFNBQVE7Ozs7QUNBcEQsT0FBTztBQUNELFVBQU0sR0NEWixTQUFTLENBQUEsQ0FBRztBQ0FaLGtCQUFv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b0IsY0FBYSxDQ0ZmLEVISjJDO2lCQUE5QyxDQUFBLFNBQVEsQUFBQyxnQkdBakMsU0FBUyxRQUFPLENBQUc7QUFDVCxBQUFJLFVBQUEsYURXUCxTQUFNLFdBQVMsQ0FDTCxJQUFHLENBQUc7QUVidkIsQUZjUSx3QkVkTSxVQUFVLEFBQUMsNkNGY1gsSUFBRyxFRWJtQyxDRmFqQztRQ2IrQixBRGM5QyxDQ2QrQztBQUN6QyxhQUFPLENBQUEsQ0FBQyxlQUFjLFlBQVksQ0FBQyxBQUFDLG9CQUNvQixTQUFPLENBQUMsQ0FBQztNQUNuRSxBQUFDLENEUXVCLGNBQWEsQ0NSbEIsRUhKMkM7YUFBOUMsQ0FBQSxTQUFRLEFBQUMsWUNBakMsU0FBUSxBQUFDO0FBQ0MsQUFBSSxVQUFBLFNDaUJQLFNBQU0sT0FBSyxDQUNELEFBQWM7QUdsQm5CLGNBQVMsR0FBQSxlQUFvQixHQUFDO0FBQUcsbUJBQW9CLEVBQUEsQ0FDaEQsT0FBb0IsQ0FBQSxTQUFRLE9BQU8sQ0FBRyxPQUFrQjtBQUMzRCxBQ0hkLDBCQUFjLFlBQVksQUFBQyxvQkNBM0IsQ0ZHcUQsU0FBUSxDRUgzQyxlQUFjLFdBQVcsQUFBQyxNQUFrQixDQUFDLENEQ2pCLENERW1DO0FBQUEsQUhpQnpFLGFBQUcsYUFBYSxFQUFJLGFBQVcsQ0FBQztRRG5CVSxBQ3FCbEQsQ0RyQm1EO0FBQ3pDLGFBQU8sQ0FBQSxDQUFDLGVBQWMsWUFBWSxDQUFDLEFBQUMsZ0JBQ2tCLENBQUM7TUFDekQsQUFBQyxFQUFDLEVESjREO0lERXZDO0VBQzNCLENBQUE7QURESSxDQUFDLENBQUM7QUlxQlYiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiU3lzdGVtLnJlZ2lzdGVyKCRfX3BsYWNlaG9sZGVyX18wLCBmdW5jdGlvbigkX19leHBvcnQpIHtcbiAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMVxuICAgICAgICB9KTsiLCJyZXR1cm4ge1xuICAgICAgc2V0dGVyczogJF9fcGxhY2Vob2xkZXJfXzAsXG4gICAgICBleGVjdXRlOiAkX19wbGFjZWhvbGRlcl9fMVxuICAgIH0iLCJmdW5jdGlvbihtKSB7XG4gICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzBcbiAgICAgICAgfSIsIiRfX3BsYWNlaG9sZGVyX18wID0gbS4kX19wbGFjZWhvbGRlcl9fMTsiLCJpbXBvcnQgVG9kb1NlcnZpY2UgZnJvbSAnLi9zcmMvVG9kb1NlcnZpY2UnO1xyXG5pbXBvcnQgVG9kb0N0cmwgZnJvbSAnLi9zcmMvVG9kb0N0cmwnO1xyXG5cclxuYW5ndWxhclxyXG4gIC5tb2R1bGUoJ2FwcCcsIFtcclxuICAgICduZ0FuaW1hdGUnLFxyXG4gICAgJ2FuZ3VsYXItZ3Jvd2wnXHJcbiAgXSlcclxuICAuc2VydmljZSgnVG9kb1NlcnZpY2UnLCBUb2RvU2VydmljZSlcclxuICAuY29udHJvbGxlcignVG9kb0NvbnRyb2xsZXInLCBUb2RvQ3RybCk7XHJcbiIsIiRfX3BsYWNlaG9sZGVyX18wID0gJF9fcGxhY2Vob2xkZXJfXzEiLCJmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMTtcbiAgICAgICAgICByZXR1cm4gKCR0cmFjZXVyUnVudGltZS5jcmVhdGVDbGFzcykoJF9fcGxhY2Vob2xkZXJfXzIsICRfX3BsYWNlaG9sZGVyX18zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fNCk7XG4gICAgICAgIH0oKSIsImltcG9ydCBUb2RvU2VydmljZSBmcm9tICcuL1RvZG9TZXJ2aWNlJztcclxuaW1wb3J0IFRvZG9JdGVtIGZyb20gJy4vVG9kb0l0ZW0nO1xyXG5cclxuY2xhc3MgVG9kb0N0cmwge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihncm93bCwgVG9kb1NlcnZpY2UpIHtcclxuICAgIHRoaXMuZ3Jvd2wgPSBncm93bDtcclxuICAgIHRoaXMuc2VydmljZSA9IFRvZG9TZXJ2aWNlO1xyXG5cclxuICAgIHRoaXMuaXRlbXMgPSB0aGlzLnNlcnZpY2UuZ2V0QWxsKCk7XHJcbiAgICB0aGlzLm5ld1RvZG8gPSAnJztcclxuICB9XHJcblxyXG4gIGFkZFRvZG8oKSB7XHJcbiAgICBsZXQgYW5JdGVtID0gbmV3IFRvZG9JdGVtKHRoaXMubmV3VG9kbyk7XHJcbiAgICB0aGlzLmdyb3dsLmFkZEluZm9NZXNzYWdlKGFuSXRlbS50b1N0cmluZygpKycgYWRkZWQnLCB7dHRsOiAyMDAwfSk7XHJcbiAgICB0aGlzLnNlcnZpY2UuYWRkKGFuSXRlbSk7XHJcbiAgICB0aGlzLm5ld1RvZG8gPSAnJztcclxuICB9XHJcblxyXG4gIHJlbW92ZVRvZG8oaXRlbSkge1xyXG4gICAgbGV0IHJlbW92ZWQgPSB0aGlzLnNlcnZpY2UucmVtb3ZlKGl0ZW0pO1xyXG4gICAgdGhpcy5ncm93bC5hZGRXYXJuTWVzc2FnZShyZW1vdmVkLnRvU3RyaW5nKCkrJ3JlbW92ZWQnLCB7dHRsOiAyMDAwfSk7XHJcbiAgfVxyXG5cclxuICBjbGVhckFsbCgpIHtcclxuICAgIHRoaXMuc2VydmljZS5jbGVhckFsbCgpO1xyXG4gICAgdGhpcy5ncm93bC5hZGRFcnJvck1lc3NhZ2UoJ0FsbCBDbGVhcicsIHt0dGw6IDIwMDB9KTtcclxuICB9XHJcblxyXG59XHJcblxyXG5Ub2RvQ3RybC4kaW5qZWN0ID0gWydncm93bCcsICdUb2RvU2VydmljZSddO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9kb0N0cmw7IiwiJF9fZXhwb3J0KCdkZWZhdWx0JywgJF9fcGxhY2Vob2xkZXJfXzApOyIsImNsYXNzIFRvZG9JdGVtIHtcclxuXHJcbiAgY29uc3RydWN0b3IodGV4dCwgY29tcGxldGVkID0gZmFsc2UpIHtcclxuICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcbiAgICB0aGlzLmNvbXBsZXRlZCA9IGNvbXBsZXRlZDtcclxuICB9XHJcblxyXG4gIHRvZ2dsZSgpIHtcclxuICAgIHRoaXMuY29tcGxldGVkID0gIXRoaXMuY29tcGxldGVkO1xyXG4gIH1cclxuXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gYCR7dGhpcy50ZXh0fS4uLmA7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9kb0l0ZW07IiwidmFyICRfX3BsYWNlaG9sZGVyX18wID0gJF9fZXhwb3J0KCRfX3BsYWNlaG9sZGVyX18xLCAkX19wbGFjZWhvbGRlcl9fMik7IiwiaW1wb3J0IFRvZG9JdGVtIGZyb20gJy4vVG9kb0l0ZW0nO1xyXG5cclxuLy8gQFNlcnZpY2VcclxuZXhwb3J0IGNsYXNzIFRvZG9TZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRvZG9zID0gW1xyXG4gICAgICBuZXcgVG9kb0l0ZW0oJ0xlYXJuIEFuZ3VsYXIgMS4wJywgdHJ1ZSksXHJcbiAgICAgIG5ldyBUb2RvSXRlbSgnTGVhcm4gQW5ndWxhciAyLjAnKSxcclxuICAgICAgbmV3IFRvZG9JdGVtKCdMZWFybiBBdFNjcmlwdCcpXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgYWRkKHRvZG8pIHtcclxuICAgIHRoaXMudG9kb3MucHVzaCh0b2RvKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZSh0b2RvKSB7XHJcbiAgICBsZXQgaW5kZXggPSB0aGlzLnRvZG9zLmluZGV4T2YodG9kbyk7XHJcbiAgICBsZXQgcmVtb3ZlZEl0ZW0gPSB0aGlzLnRvZG9zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICByZXR1cm4gcmVtb3ZlZEl0ZW07XHJcbiAgfVxyXG5cclxuICBnZXRBbGwoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50b2RvcztcclxuICB9XHJcblxyXG4gIGNsZWFyQWxsKCkge1xyXG4gICAgLy8gd2l0aCB0aGlzLnRvZG9zID0gW10gdGhlIFRvZG9DdHJsLml0ZW1zIHdvdWxkIGhhdmUgYW4gb2xkIHJlZmVyZW5jZVxyXG4gICAgLy8gYW5kIG5vIHVwZGF0ZSB3b3VsZCB0YWtlIHBsYWNlXHJcbiAgICB0aGlzLnRvZG9zLmxlbmd0aCA9IDA7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9kb1NlcnZpY2U7IiwiU3lzdGVtLnJlZ2lzdGVyKCRfX3BsYWNlaG9sZGVyX18wLCBmdW5jdGlvbigkX19leHBvcnQpIHtcbiAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMVxuICAgICAgICB9KTsiLCJyZXR1cm4ge1xuICAgICAgc2V0dGVyczogJF9fcGxhY2Vob2xkZXJfXzAsXG4gICAgICBleGVjdXRlOiAkX19wbGFjZWhvbGRlcl9fMVxuICAgIH0iLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19leHBvcnQoJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yKTsiLCJmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMTtcbiAgICAgICAgICByZXR1cm4gKCR0cmFjZXVyUnVudGltZS5jcmVhdGVDbGFzcykoJF9fcGxhY2Vob2xkZXJfXzIsICRfX3BsYWNlaG9sZGVyX18zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fNCk7XG4gICAgICAgIH0oKSIsImV4cG9ydCBjbGFzcyBCYXNlQW5ub3RhdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvciAobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlIGV4dGVuZHMgQmFzZUFubm90YXRpb24ge1xyXG4gICAgY29uc3RydWN0b3IgKG5hbWUpIHtcclxuICAgICAgICBzdXBlcihuYW1lKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbnRyb2xsZXIgZXh0ZW5kcyBCYXNlQW5ub3RhdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvciAobmFtZSkge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSW5qZWN0IHtcclxuICAgIGNvbnN0cnVjdG9yICguLi5kZXBlbmRlbmNpZXMpIHtcclxuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcclxuICAgIH1cclxufVxyXG4iLCJmdW5jdGlvbigkX19zdXBlcikge1xuICAgICAgICAgIHZhciAkX19wbGFjZWhvbGRlcl9fMCA9ICRfX3BsYWNlaG9sZGVyX18xO1xuICAgICAgICAgIHJldHVybiAoJHRyYWNldXJSdW50aW1lLmNyZWF0ZUNsYXNzKSgkX19wbGFjZWhvbGRlcl9fMiwgJF9fcGxhY2Vob2xkZXJfXzMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRfX3BsYWNlaG9sZGVyX180LCAkX19zdXBlcik7XG4gICAgICAgIH0oJF9fcGxhY2Vob2xkZXJfXzUpIiwiJHRyYWNldXJSdW50aW1lLnN1cGVyQ2FsbCgkX19wbGFjZWhvbGRlcl9fMCwgJF9fcGxhY2Vob2xkZXJfXzEsICRfX3BsYWNlaG9sZGVyX18yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMykiLCJcbiAgICAgICAgICAgIGZvciAodmFyICRfX3BsYWNlaG9sZGVyX18wID0gW10sICRfX3BsYWNlaG9sZGVyX18xID0gMDtcbiAgICAgICAgICAgICAgICAgJF9fcGxhY2Vob2xkZXJfXzIgPCBhcmd1bWVudHMubGVuZ3RoOyAkX19wbGFjZWhvbGRlcl9fMysrKVxuICAgICAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fNFskX19wbGFjZWhvbGRlcl9fNV0gPSBhcmd1bWVudHNbJF9fcGxhY2Vob2xkZXJfXzZdOyIsIiR0cmFjZXVyUnVudGltZS5zZXRQcm9wZXJ0eSgkX19wbGFjZWhvbGRlcl9fMCxcbiAgICAgICAgICAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIpIiwiJF9fcGxhY2Vob2xkZXJfXzBbJHRyYWNldXJSdW50aW1lLnRvUHJvcGVydHkoJF9fcGxhY2Vob2xkZXJfXzEpXSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
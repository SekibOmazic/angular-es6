"use strict";
var TodoCtrl = function TodoCtrl(growl, TodoService) {
  this.growl = growl;
  this.service = TodoService;
  this.items = this.service.getAll();
  this.newTodo = '';
};
($traceurRuntime.createClass)(TodoCtrl, {
  addTodo: function() {
    var anItem = new TodoItem(this.newTodo);
    this.growl.addInfoMessage(anItem.toString() + ' added', {ttl: 2000});
    this.service.add(anItem);
    this.newTodo = '';
  },
  removeTodo: function(item) {
    var removed = this.service.remove(item);
    this.growl.addWarnMessage(removed.toString() + 'removed', {ttl: 2000});
  },
  clearAll: function() {
    this.service.clearAll();
    this.growl.addErrorMessage('All Clear', {ttl: 2000});
  }
}, {});

//# sourceMappingURL=TodoCtrl.map

"use strict";
var TodoItem = function TodoItem(text) {
  var completed = arguments[1] !== (void 0) ? arguments[1] : false;
  this.text = text;
  this.completed = completed;
};
($traceurRuntime.createClass)(TodoItem, {
  toggle: function() {
    this.completed = !this.completed;
  },
  toString: function() {
    return (this.text + "...");
  }
}, {});

//# sourceMappingURL=TodoItem.map

"use strict";
var TodoService = function TodoService() {
  this.todos = [new TodoItem('Learn Angular 1.0', true), new TodoItem('Learn Angular 2.0'), new TodoItem('Learn AtScript')];
};
($traceurRuntime.createClass)(TodoService, {
  add: function(todo) {
    this.todos.push(todo);
  },
  remove: function(todo) {
    var index = this.todos.indexOf(todo);
    var removedItem = this.todos.splice(index, 1);
    return removedItem;
  },
  getAll: function() {
    return this.todos;
  },
  clearAll: function() {
    this.todos.length = 0;
  }
}, {});

//# sourceMappingURL=TodoService.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zZWtpYm9tYXppYy9wcm9qZWN0cy9hbmd1bGFyLWVzNi9hcHAvc3JjL1RvZG9DdHJsLmpzIiwiL1VzZXJzL3Nla2lib21hemljL3Byb2plY3RzL2FuZ3VsYXItZXM2L2FwcC9zcmMvQHRyYWNldXIvZ2VuZXJhdGVkL1RlbXBsYXRlUGFyc2VyLzEiLCIvVXNlcnMvc2VraWJvbWF6aWMvcHJvamVjdHMvYW5ndWxhci1lczYvYXBwL3NyYy9AdHJhY2V1ci9nZW5lcmF0ZWQvVGVtcGxhdGVQYXJzZXIvMiIsIi9Vc2Vycy9zZWtpYm9tYXppYy9wcm9qZWN0cy9hbmd1bGFyLWVzNi9hcHAvc3JjL1RvZG9JdGVtLmpzIiwiL1VzZXJzL3Nla2lib21hemljL3Byb2plY3RzL2FuZ3VsYXItZXM2L2FwcC9zcmMvVG9kb1NlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxBQUFJLEVBQUEsV0RBSixTQUFNLFNBQU8sQ0FFQyxLQUFJLENBQUcsQ0FBQSxXQUFVLENBQUc7QUFDOUIsS0FBRyxNQUFNLEVBQUksTUFBSSxDQUFDO0FBQ2xCLEtBQUcsUUFBUSxFQUFJLFlBQVUsQ0FBQztBQUUxQixLQUFHLE1BQU0sRUFBSSxDQUFBLElBQUcsUUFBUSxPQUFPLEFBQUMsRUFBQyxDQUFDO0FBQ2xDLEtBQUcsUUFBUSxFQUFJLEdBQUMsQ0FBQztBQ1BtQixBRFF0QyxDQ1JzQztBQ0F4QyxBQUFDLGVBQWMsWUFBWSxDQUFDLEFBQUM7QUZVM0IsUUFBTSxDQUFOLFVBQU8sQUFBQyxDQUFFO0FBQ1IsQUFBSSxNQUFBLENBQUEsTUFBSyxFQUFJLElBQUksU0FBTyxBQUFDLENBQUMsSUFBRyxRQUFRLENBQUMsQ0FBQztBQUN2QyxPQUFHLE1BQU0sZUFBZSxBQUFDLENBQUMsTUFBSyxTQUFTLEFBQUMsRUFBQyxDQUFBLENBQUUsU0FBTyxDQUFHLEVBQUMsR0FBRSxDQUFHLEtBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbEUsT0FBRyxRQUFRLElBQUksQUFBQyxDQUFDLE1BQUssQ0FBQyxDQUFDO0FBQ3hCLE9BQUcsUUFBUSxFQUFJLEdBQUMsQ0FBQztFQUNuQjtBQUVBLFdBQVMsQ0FBVCxVQUFXLElBQUcsQ0FBRztBQUNmLEFBQUksTUFBQSxDQUFBLE9BQU0sRUFBSSxDQUFBLElBQUcsUUFBUSxPQUFPLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztBQUN2QyxPQUFHLE1BQU0sZUFBZSxBQUFDLENBQUMsT0FBTSxTQUFTLEFBQUMsRUFBQyxDQUFBLENBQUUsVUFBUSxDQUFHLEVBQUMsR0FBRSxDQUFHLEtBQUcsQ0FBQyxDQUFDLENBQUM7RUFDdEU7QUFFQSxTQUFPLENBQVAsVUFBUSxBQUFDLENBQUU7QUFDVCxPQUFHLFFBQVEsU0FBUyxBQUFDLEVBQUMsQ0FBQztBQUN2QixPQUFHLE1BQU0sZ0JBQWdCLEFBQUMsQ0FBQyxXQUFVLENBQUcsRUFBQyxHQUFFLENBQUcsS0FBRyxDQUFDLENBQUMsQ0FBQztFQUN0RDtBQUFBLEtFekJtRjtBRjRCckY7OztBRzVCQTtBRkFBLEFBQUksRUFBQSxXRUFKLFNBQU0sU0FBTyxDQUVDLElBQUcsQUFBbUIsQ0FBRztJQUFuQixVQUFRLDZDQUFJLE1BQUk7QUFDaEMsS0FBRyxLQUFLLEVBQUksS0FBRyxDQUFDO0FBQ2hCLEtBQUcsVUFBVSxFQUFJLFVBQVEsQ0FBQztBRkpVLEFFS3RDLENGTHNDO0FDQXhDLEFBQUMsZUFBYyxZQUFZLENBQUMsQUFBQztBQ08zQixPQUFLLENBQUwsVUFBTSxBQUFDLENBQUU7QUFDUCxPQUFHLFVBQVUsRUFBSSxFQUFDLElBQUcsVUFBVSxDQUFDO0VBQ2xDO0FBRUEsU0FBTyxDQUFQLFVBQVEsQUFBQyxDQUFFO0FBQ1QsV0FBVSxJQUFHLEtBQUssRUFBQyxNQUFJLEVBQUM7RUFDMUI7QUFBQSxLRGJtRjtBQ2dCckY7OztBQ1ZBO0FITkEsQUFBSSxFQUFBLGNHTUosU0FBTSxZQUFVLENBRUgsQUFBQyxDQUFFO0FBQ1osS0FBRyxNQUFNLEVBQUksRUFDWCxHQUFJLFNBQU8sQUFBQyxDQUFDLG1CQUFrQixDQUFHLEtBQUcsQ0FBQyxDQUN0QyxJQUFJLFNBQU8sQUFBQyxDQUFDLG1CQUFrQixDQUFDLENBQ2hDLElBQUksU0FBTyxBQUFDLENBQUMsZ0JBQWUsQ0FBQyxDQUMvQixDQUFDO0FIYm1DLEFHY3RDLENIZHNDO0FDQXhDLEFBQUMsZUFBYyxZQUFZLENBQUMsQUFBQztBRWdCM0IsSUFBRSxDQUFGLFVBQUksSUFBRyxDQUFHO0FBQ1IsT0FBRyxNQUFNLEtBQUssQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0VBQ3ZCO0FBRUEsT0FBSyxDQUFMLFVBQU8sSUFBRyxDQUFHO0FBQ1gsQUFBSSxNQUFBLENBQUEsS0FBSSxFQUFJLENBQUEsSUFBRyxNQUFNLFFBQVEsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDO0FBQ3BDLEFBQUksTUFBQSxDQUFBLFdBQVUsRUFBSSxDQUFBLElBQUcsTUFBTSxPQUFPLEFBQUMsQ0FBQyxLQUFJLENBQUcsRUFBQSxDQUFDLENBQUM7QUFDN0MsU0FBTyxZQUFVLENBQUM7RUFDcEI7QUFFQSxPQUFLLENBQUwsVUFBTSxBQUFDLENBQUU7QUFDUCxTQUFPLENBQUEsSUFBRyxNQUFNLENBQUM7RUFDbkI7QUFFQSxTQUFPLENBQVAsVUFBUSxBQUFDLENBQUU7QUFHVCxPQUFHLE1BQU0sT0FBTyxFQUFJLEVBQUEsQ0FBQztFQUN2QjtBQUFBLEtGbENtRjtBRXFDckYiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVG9kb0N0cmwge1xuXG4gIGNvbnN0cnVjdG9yKGdyb3dsLCBUb2RvU2VydmljZSkge1xuICAgIHRoaXMuZ3Jvd2wgPSBncm93bDtcbiAgICB0aGlzLnNlcnZpY2UgPSBUb2RvU2VydmljZTtcblxuICAgIHRoaXMuaXRlbXMgPSB0aGlzLnNlcnZpY2UuZ2V0QWxsKCk7XG4gICAgdGhpcy5uZXdUb2RvID0gJyc7XG4gIH1cblxuICBhZGRUb2RvKCkge1xuICAgIGxldCBhbkl0ZW0gPSBuZXcgVG9kb0l0ZW0odGhpcy5uZXdUb2RvKTtcbiAgICB0aGlzLmdyb3dsLmFkZEluZm9NZXNzYWdlKGFuSXRlbS50b1N0cmluZygpKycgYWRkZWQnLCB7dHRsOiAyMDAwfSk7XG4gICAgdGhpcy5zZXJ2aWNlLmFkZChhbkl0ZW0pO1xuICAgIHRoaXMubmV3VG9kbyA9ICcnO1xuICB9XG5cbiAgcmVtb3ZlVG9kbyhpdGVtKSB7XG4gICAgbGV0IHJlbW92ZWQgPSB0aGlzLnNlcnZpY2UucmVtb3ZlKGl0ZW0pO1xuICAgIHRoaXMuZ3Jvd2wuYWRkV2Fybk1lc3NhZ2UocmVtb3ZlZC50b1N0cmluZygpKydyZW1vdmVkJywge3R0bDogMjAwMH0pO1xuICB9XG5cbiAgY2xlYXJBbGwoKSB7XG4gICAgdGhpcy5zZXJ2aWNlLmNsZWFyQWxsKCk7XG4gICAgdGhpcy5ncm93bC5hZGRFcnJvck1lc3NhZ2UoJ0FsbCBDbGVhcicsIHt0dGw6IDIwMDB9KTtcbiAgfVxuXG59XG4iLCJ2YXIgJF9fcGxhY2Vob2xkZXJfXzAgPSAkX19wbGFjZWhvbGRlcl9fMSIsIigkdHJhY2V1clJ1bnRpbWUuY3JlYXRlQ2xhc3MpKCRfX3BsYWNlaG9sZGVyX18wLCAkX19wbGFjZWhvbGRlcl9fMSwgJF9fcGxhY2Vob2xkZXJfXzIpIiwiY2xhc3MgVG9kb0l0ZW0ge1xuXG4gIGNvbnN0cnVjdG9yKHRleHQsIGNvbXBsZXRlZCA9IGZhbHNlKSB7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLmNvbXBsZXRlZCA9IGNvbXBsZXRlZDtcbiAgfVxuXG4gIHRvZ2dsZSgpIHtcbiAgICB0aGlzLmNvbXBsZXRlZCA9ICF0aGlzLmNvbXBsZXRlZDtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgJHt0aGlzLnRleHR9Li4uYDtcbiAgfVxuXG59XG4iLCIvKlxuIERvIHdlIGhhdmUgYW5ub3RhdGlvbiBsaWtlIEBTZXJ2aWNlIGluIEFuZ3VsYXIgMi4wP1xuIE1heWJlIGl0IGlzbid0IGV2ZW4gbmVlZGVkLlxuICovXG5cbi8vIEBTZXJ2aWNlXG5jbGFzcyBUb2RvU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50b2RvcyA9IFtcbiAgICAgIG5ldyBUb2RvSXRlbSgnTGVhcm4gQW5ndWxhciAxLjAnLCB0cnVlKSxcbiAgICAgIG5ldyBUb2RvSXRlbSgnTGVhcm4gQW5ndWxhciAyLjAnKSxcbiAgICAgIG5ldyBUb2RvSXRlbSgnTGVhcm4gQXRTY3JpcHQnKVxuICAgIF07XG4gIH1cblxuICBhZGQodG9kbykge1xuICAgIHRoaXMudG9kb3MucHVzaCh0b2RvKTtcbiAgfVxuXG4gIHJlbW92ZSh0b2RvKSB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy50b2Rvcy5pbmRleE9mKHRvZG8pO1xuICAgIGxldCByZW1vdmVkSXRlbSA9IHRoaXMudG9kb3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gcmVtb3ZlZEl0ZW07XG4gIH1cblxuICBnZXRBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9kb3M7XG4gIH1cblxuICBjbGVhckFsbCgpIHtcbiAgICAvLyB3aXRoIHRoaXMudG9kb3MgPSBbXSB0aGUgVG9kb0N0cmwuaXRlbXMgd291bGQgaGF2ZSBhbiBvbGQgcmVmZXJlbmNlXG4gICAgLy8gYW5kIG5vIHVwZGF0ZSB3b3VsZCB0YWtlIHBsYWNlXG4gICAgdGhpcy50b2Rvcy5sZW5ndGggPSAwO1xuICB9XG5cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==